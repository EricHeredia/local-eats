{"version":3,"sources":["components/RestarauntRow.js","components/GetResults.js","App.js","index.js"],"names":["RestarauntRow","props","_useState","useState","_useState2","Object","slicedToArray","checked","setChecked","localData","JSON","parse","localStorage","getItem","restaraunt","name","react_default","a","createElement","id","style","backgroundColor","type","onChange","setItem","stringify","color","className","GetResults","rows","setRows","_useState3","latLng","requestObj","location","window","google","maps","LatLng","radius","service","places","PlacesService","document","getElementById","rowContainer","nearbySearch","results","status","pagination","forEach","data","key","place_id","createRow","components_RestarauntRow","push","App","setLatLng","input","autocomplete","Autocomplete","types","event","addListener","place","getPlace","geometry","lat","lng","components_GetResults","ReactDOM","render","src_App_0"],"mappings":"8NA2CeA,SAzCO,SAACC,GAAU,IAAAC,EAEDC,qBAFCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAExBK,EAFwBH,EAAA,GAEfI,EAFeJ,EAAA,GAI3BK,EAAYC,KAAKC,MAAMC,aAAaC,QAAQZ,EAAMa,WAAWC,OAUlD,MAAXR,IAPEE,EAAUF,QACZC,GAAW,GAEXA,GAAW,IAkBf,OACEQ,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,OAAKC,GAAG,gBAAgBC,MAAO,CAACC,gBAAmBd,EAAU,OAAQ,UACnES,EAAAC,EAAAC,cAAA,SAAOI,KAAK,WAAWH,GAAG,cAAcI,SAftB,WAClBhB,GACFE,EAAUF,SAAU,EACpBK,aAAaY,QAAQf,EAAUM,KAAML,KAAKe,UAAUhB,IACpDD,GAAW,KAEXC,EAAUF,SAAU,EACpBK,aAAaY,QAAQf,EAAUM,KAAML,KAAKe,UAAUhB,IACpDD,GAAW,KAO0DD,QAASA,IAC5ES,EAAAC,EAAAC,cAAA,MAAIC,GAAG,YAAYC,MAAO,CAACM,MAASnB,EAAS,OAAO,UACjDN,EAAMa,WAAWC,MAEnBR,EAASS,EAAAC,EAAAC,cAAA,MAAIS,UAAU,aAAd,aAAyC,SCqC5CC,EAvEI,SAAC3B,GAAU,IAAAC,EACJC,qBADIC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACrB2B,EADqBzB,EAAA,GACf0B,EADe1B,EAAA,GAAA2B,EAEX5B,qBAAV6B,EAFqB3B,OAAAC,EAAA,EAAAD,CAAA0B,EAAA,MAOxBE,EAAa,CACfC,SAJe,IAAIC,OAAOC,OAAOC,KAAKC,OAAOrC,EAAM+B,OAAO,GAAI/B,EAAM+B,OAAO,IAK3EO,OAJa,IAKbjB,KAAM,CAAE,eAGJkB,EAAU,IAAIL,OAAOC,OAAOC,KAAKI,OAAOC,cAAcC,SAASC,eAAe,gBAElF,GAAIZ,IAAW/B,EAAM+B,OAAQ,CAC7B,IAAIa,EAAe,GACnBL,EAAQM,aAAab,EAAY,SAACc,EAASC,EAAQC,GAClC,OAAXD,IAEJD,EAAQG,QAAQ,SAACC,GAEf,IAAMrC,EAAa,CACjBsC,IAAKD,EAAKhC,GACVJ,KAAMoC,EAAKpC,KACXI,GAAIgC,EAAKE,SACT9C,SAAS,GAGNK,aAAaC,QAAQC,EAAWC,OACnCH,aAAaY,QAAQV,EAAWC,KAAML,KAAKe,UAAUX,IAGvD,IAAIwC,EAAYtC,EAAAC,EAAAC,cAACqC,EAAD,CAAeH,IAAKtC,EAAWK,GAAIL,WAAYA,IAC/D+B,EAAaW,KAAKF,KAGpBxB,EAAQe,MA2BZ,OACE7B,EAAAC,EAAAC,cAAA,WACGW,IC9CQ4B,EAnBH,WAAM,IAAAvD,EAEUC,mBAAS,CAAC,YAAa,oBAFjCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAEX8B,EAFW5B,EAAA,GAEHsD,EAFGtD,EAAA,GAIZuD,EAAQhB,SAASC,eAAe,gBAClCgB,EAAe,IAAIzB,OAAOC,OAAOC,KAAKI,OAAOoB,aAAaF,EAAO,CAACG,MAAO,CAAC,eAO5E,OANF3B,OAAOC,OAAOC,KAAK0B,MAAMC,YAAYJ,EAAc,gBAAiB,WAClE,IAAIK,EAAQL,EAAaM,WACrBlC,EAAS,CAACiC,EAAME,SAASjC,SAASkC,MAAOH,EAAME,SAASjC,SAASmC,OACrEX,EAAU1B,KAIRhB,EAAAC,EAAAC,cAAA,OAAKS,UAAU,OACbX,EAAAC,EAAAC,cAACoD,EAAD,CAAYtC,OAAQA,MCb1BuC,IAASC,OAAOxD,EAAAC,EAAAC,cAACuD,EAAD,MAAS9B,SAASC,eAAe","file":"static/js/main.189d6638.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\nconst RestarauntRow = (props) => {\r\n\r\n  const [checked, setChecked] = useState()\r\n\r\n  let localData = JSON.parse(localStorage.getItem(props.restaraunt.name))\r\n  \r\n  const beenThere = () => {\r\n    if (localData.checked) {\r\n      setChecked(true)\r\n    } else {\r\n      setChecked(false)\r\n    }\r\n  }\r\n  \r\n  if (checked == null) {beenThere()}\r\n\r\n  const onChangeHandler = () => {\r\n    if (checked) {\r\n      localData.checked = false\r\n      localStorage.setItem(localData.name, JSON.stringify(localData))\r\n      setChecked(false)\r\n    } else {\r\n      localData.checked = true\r\n      localStorage.setItem(localData.name, JSON.stringify(localData))\r\n      setChecked(true)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <label>\r\n      <div id=\"restarauntRow\" style={{'backgroundColor': checked ? \"#aaa\": \"white\"}}>\r\n        <input type=\"checkbox\" id=\"rowCheckbox\" onChange={onChangeHandler} checked={checked}/>\r\n        <h3 id=\"rowHeader\" style={{'color': checked? '#666':'black'}}>\r\n          {props.restaraunt.name}\r\n        </h3>\r\n        {checked? <h3 className=\"been-here\">BEEN HERE</h3>:null}\r\n      </div>\r\n    </label>\r\n  )\r\n}\r\n\r\nexport default RestarauntRow","import React, { useState } from 'react'\r\nimport RestarauntRow from './RestarauntRow'\r\n\r\nconst GetResults = (props) => {\r\n  const [rows, setRows] = useState()\r\n  const [latLng] = useState()\r\n\r\n  let mylocation = new window.google.maps.LatLng(props.latLng[0], props.latLng[1]);\r\n  const radius = 2000;\r\n\r\n  let requestObj = {\r\n    location: mylocation,\r\n    radius: radius,\r\n    type: [ 'restaurant' ],\r\n  };\r\n\r\n  const service = new window.google.maps.places.PlacesService(document.getElementById('google-data'));\r\n\r\n    if (latLng !== props.latLng) {\r\n    let rowContainer = []\r\n    service.nearbySearch(requestObj, (results, status, pagination) => {\r\n      if (status !== 'OK') return;\r\n\r\n      results.forEach((data) => {\r\n\r\n        const restaraunt = {\r\n          key: data.id,\r\n          name: data.name,\r\n          id: data.place_id,\r\n          checked: false\r\n        }\r\n\r\n        if (!localStorage.getItem(restaraunt.name)){\r\n          localStorage.setItem(restaraunt.name, JSON.stringify(restaraunt))\r\n        }\r\n        \r\n        let createRow = <RestarauntRow key={restaraunt.id} restaraunt={restaraunt} />\r\n        rowContainer.push(createRow)\r\n      })\r\n      \r\n      setRows(rowContainer)\r\n\r\n      //for (let place in results) {\r\n        //console.log(results[place].name)\r\n        //service.getDetails({placeId: results[place].place_id}, function(details, status) {\r\n        //  console.log(status)\r\n        //  console.log('__________________')\r\n        //  console.log(details.name)\r\n        //  console.log(details.formatted_address)\r\n        //  console.log(details.formatted_phone_number)\r\n        //  console.log('Rating: ' + (details.rating ? details.rating:'Not yet rated'))\r\n        //})\r\n\r\n      //}\r\n\r\n      //console.log(pagination.hasNextPage)\r\n      //if (pagination.hasNextPage) {pagination.nextPage()}\r\n\r\n      //var elem = document.createElement('img')\r\n      //elem.setAttribute('src', results[1].photos[0].getUrl({maxWidth: 300, maxHeight: 300}));\r\n      //elem.setAttribute('height', '200')\r\n      //elem.setAttribute('width', '300')\r\n      //elem.setAttribute('alt', 'test image')\r\n      //document.getElementById('root').appendChild(elem)\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {rows}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default GetResults","import React, { useState } from 'react';\nimport './App.css';\nimport GetResults from './components/GetResults'\n\nconst App = () => {\n\nconst [latLng, setLatLng] = useState([41.7962928, -88.19741479999999])\n\nconst input = document.getElementById('autocomplete')\nlet autocomplete = new window.google.maps.places.Autocomplete(input, {types: ['(regions)']})\nwindow.google.maps.event.addListener(autocomplete, 'place_changed', () => {\n  let place = autocomplete.getPlace()\n  let latLng = [place.geometry.location.lat(), place.geometry.location.lng()]\n  setLatLng(latLng)\n})\n\n  return (\n    <div className=\"App\">\n      <GetResults latLng={latLng}/>\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}