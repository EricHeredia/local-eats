{"version":3,"sources":["components/ShowMore.js","components/RestaurantRow.js","components/GetResults.js","App.js","index.js"],"names":["ShowMore","console","log","react_default","a","createElement","RestaurantRow","props","restaurantData","JSON","parse","localStorage","getItem","restaurant","name","_useState","useState","checked","_useState2","Object","slicedToArray","setChecked","id","style","backgroundColor","type","onChange","setItem","stringify","color","className","GetResults","rows","setRows","requestObj","location","window","google","maps","LatLng","latLng","radius","service","places","PlacesService","document","getElementById","rowContainer","nearbySearch","results","status","pagination","forEach","data","key","place_id","createRow","components_RestaurantRow","push","components_ShowMore","App","setLatLng","input","autocomplete","Autocomplete","types","componentRestrictions","country","addListener","place","getPlace","geometry","lat","lng","components_GetResults","ReactDOM","render","src_App_0"],"mappings":"8NAWeA,SATE,WAEf,OADAC,QAAQC,IAAI,eAEVC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,8BC2BSC,EA/BO,SAACC,GAErB,IAAIC,EAAiBC,KAAKC,MAAMC,aAAaC,QAAQL,EAAMM,WAAWC,OAFvCC,EAIDC,mBAASR,EAAeS,SAJvBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GAIxBE,EAJwBC,EAAA,GAIfG,EAJeH,EAAA,GAkB/B,OADAjB,QAAQC,IAAI,oBAEVC,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,OAAKiB,GAAG,gBAAgBC,MAAO,CAACC,gBAAmBP,EAAU,OAAQ,UACnEd,EAAAC,EAAAC,cAAA,SAAOoB,KAAK,WAAWH,GAAG,cAAcI,SAfxB,WAElBlB,EAAeS,SAAWA,EAC1BN,aAAagB,QAAQnB,EAAeM,KAAML,KAAKmB,UAAUpB,IACzDa,GAAYJ,IAWuDA,QAASA,IAC1Ed,EAAAC,EAAAC,cAAA,MAAIiB,GAAG,YAAYC,MAAO,CAACM,MAASZ,EAAS,OAAO,UACjDV,EAAMM,WAAWC,MAEnBG,GAAWd,EAAAC,EAAAC,cAAA,MAAIyB,UAAU,aAAd,gBCuBLC,EA9CI,SAACxB,GAAU,IAAAQ,EACJC,qBADIE,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GACrBiB,EADqBd,EAAA,GACfe,EADef,EAAA,GAMxBgB,EAAa,CACfC,SAJe,IAAIC,OAAOC,OAAOC,KAAKC,OAAOhC,EAAMiC,OAAO,GAAIjC,EAAMiC,OAAO,IAK3EC,OAJa,IAKbhB,KAAM,CAAE,eAGJiB,EAAU,IAAIN,OAAOC,OAAOC,KAAKK,OAAOC,cAAcC,SAASC,eAAe,gBAE9EC,EAAe,GAwBrB,OAtBEL,EAAQM,aAAad,EAAY,SAACe,EAASC,EAAQC,GAClC,OAAXD,IAEJD,EAAQG,QAAQ,SAACC,GAEf,IAAMxC,EAAa,CACjByC,IAAKD,EAAK/B,GACVR,KAAMuC,EAAKvC,KACXQ,GAAI+B,EAAKE,SACTtC,SAAS,GAGNN,aAAaC,QAAQC,EAAWC,OACnCH,aAAagB,QAAQd,EAAWC,KAAML,KAAKmB,UAAUf,IAGvD,IAAI2C,EAAYrD,EAAAC,EAAAC,cAACoD,EAAD,CAAeH,IAAKzC,EAAWS,GAAIT,WAAYA,IAC/DkC,EAAaW,KAAKF,KAEpBvB,EAAQc,MAEZ9C,QAAQC,IAAI,iBAEVC,EAAAC,EAAAC,cAAA,WACG2B,EACD7B,EAAAC,EAAAC,cAACsD,EAAD,QCfSC,EA1BH,WAAM,IAAA7C,EAEUC,mBAAS,CAAC,YAAa,oBAFjCE,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GAEXyB,EAFWtB,EAAA,GAEH2C,EAFG3C,EAAA,GAIZ4C,EAAQjB,SAASC,eAAe,gBAChCiB,EAAe,IAAI3B,OAAOC,OAAOC,KAAKK,OAAOqB,aAAaF,EAC9D,CAACG,MAAO,CAAC,aAAcC,sBAAuB,CAACC,QAAS,QAaxD,OAXFJ,EAAaK,YAAY,gBAAiB,WACxC,IAAIC,EAAQN,EAAaO,WAEzB,GAAKD,EAAME,SAAX,CAIA,IAAI/B,EAAS,CAAC6B,EAAME,SAASpC,SAASqC,MAAOH,EAAME,SAASpC,SAASsC,OACrEZ,EAAUrB,MAEVvC,QAAQC,IAAI,UAEVC,EAAAC,EAAAC,cAAA,OAAKyB,UAAU,OACZU,GAAUrC,EAAAC,EAAAC,cAACqE,EAAD,CAAYlC,OAAQA,MCpBrCmC,IAASC,OAAOzE,EAAAC,EAAAC,cAACwE,EAAD,MAAShC,SAASC,eAAe","file":"static/js/main.4ad1679a.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst ShowMore = () => {\r\n  console.log('ShowMore.js')\r\n  return(\r\n    <div>\r\n      <button>Show More</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ShowMore","import React, { useState } from 'react'\r\n\r\nconst RestaurantRow = (props) => {\r\n\r\n  let restaurantData = JSON.parse(localStorage.getItem(props.restaurant.name))\r\n\r\n  const [checked, setChecked] = useState(restaurantData.checked)\r\n\r\n  const onCheckChange = () => {\r\n    if (checked) {\r\n      restaurantData.checked = !checked\r\n      localStorage.setItem(restaurantData.name, JSON.stringify(restaurantData))\r\n      setChecked(!checked)\r\n    } else {\r\n      restaurantData.checked = !checked\r\n      localStorage.setItem(restaurantData.name, JSON.stringify(restaurantData))\r\n      setChecked(!checked)\r\n    }\r\n  }\r\n  console.log('RestaurantRow.js')\r\n  return (\r\n    <label>\r\n      <div id=\"restaurantRow\" style={{'backgroundColor': checked ? \"#aaa\": \"white\"}}>\r\n        <input type=\"checkbox\" id=\"rowCheckbox\" onChange={onCheckChange} checked={checked}/>\r\n        <h3 id=\"rowHeader\" style={{'color': checked? '#666':'black'}}>\r\n          {props.restaurant.name}\r\n        </h3>\r\n        {checked && <h3 className=\"been-here\">BEEN HERE</h3>}\r\n      </div>\r\n    </label>\r\n  )\r\n}\r\n\r\nexport default RestaurantRow","import React, { useState } from 'react'\r\nimport ShowMore from './ShowMore'\r\nimport RestaurantRow from './RestaurantRow'\r\n\r\nconst GetResults = (props) => {\r\n  const [rows, setRows] = useState()\r\n\r\n  let mylocation = new window.google.maps.LatLng(props.latLng[0], props.latLng[1]);\r\n  const radius = 2000;\r\n\r\n  let requestObj = {\r\n    location: mylocation,\r\n    radius: radius,\r\n    type: [ 'restaurant' ],\r\n  };\r\n\r\n  const service = new window.google.maps.places.PlacesService(document.getElementById('google-data'));\r\n\r\n    let rowContainer = []\r\n    \r\n    service.nearbySearch(requestObj, (results, status, pagination) => {\r\n      if (status !== 'OK') return;\r\n\r\n      results.forEach((data) => {\r\n\r\n        const restaurant = {\r\n          key: data.id,\r\n          name: data.name,\r\n          id: data.place_id,\r\n          checked: false\r\n        }\r\n\r\n        if (!localStorage.getItem(restaurant.name)){\r\n          localStorage.setItem(restaurant.name, JSON.stringify(restaurant))\r\n        }\r\n        \r\n        let createRow = <RestaurantRow key={restaurant.id} restaurant={restaurant} />\r\n        rowContainer.push(createRow)\r\n      })\r\n      setRows(rowContainer)\r\n    })\r\n  console.log('GetResults.js')\r\n  return (\r\n    <div>\r\n      {rows}\r\n      <ShowMore />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default GetResults","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport GetResults from './components/GetResults';\r\n\r\nconst App = () => {\r\n\r\nconst [latLng, setLatLng] = useState([41.7962928, -88.19741479999999])\r\n\r\nconst input = document.getElementById('autocomplete')\r\nconst autocomplete = new window.google.maps.places.Autocomplete(input, \r\n  {types: ['(regions)'], componentRestrictions: {country: 'US'}})\r\n\r\nautocomplete.addListener('place_changed', () => {\r\n  let place = autocomplete.getPlace()\r\n\r\n  if (!place.geometry) {\r\n    // Not needed atm\r\n    return\r\n  }\r\n  let latLng = [place.geometry.location.lat(), place.geometry.location.lng()]\r\n  setLatLng(latLng)\r\n})\r\n  console.log('App.js')\r\n  return (\r\n    <div className=\"App\">\r\n      {latLng && <GetResults latLng={latLng}/>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}