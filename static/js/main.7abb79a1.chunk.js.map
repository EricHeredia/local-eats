{"version":3,"sources":["components/RestaurantRow.js","components/GetResults.js","App.js","index.js"],"names":["RestaurantRow","props","restaurantData","JSON","parse","localStorage","getItem","restaurant","name","_useState","useState","checked","_useState2","Object","slicedToArray","setChecked","react_default","a","createElement","id","style","backgroundColor","type","display","onChange","setItem","stringify","color","className","GetResults","rows","setRows","requestObj","location","window","google","maps","LatLng","latLng","radius","service","places","PlacesService","document","getElementById","rowContainer","useEffect","nearbySearch","results","status","pagination","forEach","data","key","place_id","createRow","components_RestaurantRow","push","App","setLatLng","input","autocomplete","Autocomplete","types","componentRestrictions","country","addListener","place","getPlace","geometry","lat","lng","components_GetResults","ReactDOM","render","src_App_0"],"mappings":"8NAmDeA,SAjDO,SAACC,GAErB,IAAIC,EAAiBC,KAAKC,MAAMC,aAAaC,QAAQL,EAAMM,WAAWC,OAFvCC,EAIDC,mBAASR,EAAeS,SAJvBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GAIxBE,EAJwBC,EAAA,GAIfG,EAJeH,EAAA,GAiC/B,OACEI,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,OAAKC,GAAG,gBAAgBC,MAAO,CAACC,gBAAmBV,EAAU,OAAQ,UACnEK,EAAAC,EAAAC,cAAA,SAAOI,KAAK,QAAQH,GAAIjB,EAAeiB,GAAIX,KAAK,WAAWY,MAAO,CAACG,QAAS,UAC5EP,EAAAC,EAAAC,cAAA,SAAOI,KAAK,WAAWH,GAAG,cAAcK,SA/BxB,WAElBtB,EAAeS,SAAWA,EAC1BN,aAAaoB,QAAQvB,EAAeM,KAAML,KAAKuB,UAAUxB,IACzDa,GAAYJ,IA2BuDA,QAASA,IAE1EK,EAAAC,EAAAC,cAAA,MAAIC,GAAG,YAAYC,MAAO,CAACO,MAAShB,EAAU,OAAO,UAClDV,EAAMM,WAAWC,MAGnBG,GAAWK,EAAAC,EAAAC,cAAA,MAAIU,UAAU,aAAd,iBCKLC,EA/CI,SAAC5B,GAAU,IAAAQ,EACJC,qBADIE,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GACrBqB,EADqBlB,EAAA,GACfmB,EADenB,EAAA,GAMxBoB,EAAa,CACfC,SAJe,IAAIC,OAAOC,OAAOC,KAAKC,OAAOpC,EAAMqC,OAAO,GAAIrC,EAAMqC,OAAO,IAK3EC,OAJa,IAKbjB,KAAM,CAAE,eAGJkB,EAAU,IAAIN,OAAOC,OAAOC,KAAKK,OAAOC,cAAcC,SAASC,eAAe,gBAE9EC,EAAe,GA0BrB,OAxBEC,oBAAU,WACRN,EAAQO,aAAaf,EAAY,SAACgB,EAASC,EAAQC,GAClC,OAAXD,IAEJD,EAAQG,QAAQ,SAACC,GAEf,IAAM7C,EAAa,CACjB8C,IAAKD,EAAKjC,GACVX,KAAM4C,EAAK5C,KACXW,GAAIiC,EAAKE,SACT3C,SAAS,GAGNN,aAAaC,QAAQC,EAAWC,OACnCH,aAAaoB,QAAQlB,EAAWC,KAAML,KAAKuB,UAAUnB,IAGvD,IAAIgD,EAAYvC,EAAAC,EAAAC,cAACsC,EAAD,CAAeH,IAAK9C,EAAWY,GAAIqB,QAASA,EAASjC,WAAYA,IACjFsC,EAAaY,KAAKF,KAEpBxB,EAAQc,OAET,CAAC5C,EAAMqC,SAGVtB,EAAAC,EAAAC,cAAA,WACGY,ICfQ4B,EA1BH,WAAM,IAAAjD,EAEUC,mBAAS,CAAC,YAAa,oBAFjCE,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GAEX6B,EAFW1B,EAAA,GAEH+C,EAFG/C,EAAA,GAIZgD,EAAQjB,SAASC,eAAe,gBAChCiB,EAAe,IAAI3B,OAAOC,OAAOC,KAAKK,OAAOqB,aAAaF,EAC9D,CAACG,MAAO,CAAC,aAAcC,sBAAuB,CAACC,QAAS,QAaxD,OAXFJ,EAAaK,YAAY,gBAAiB,WACxC,IAAIC,EAAQN,EAAaO,WAEzB,GAAKD,EAAME,SAAX,CAIA,IAAI/B,EAAS,CAAC6B,EAAME,SAASpC,SAASqC,MAAOH,EAAME,SAASpC,SAASsC,OACrEZ,EAAUrB,MAIRtB,EAAAC,EAAAC,cAAA,OAAKU,UAAU,OACZU,GAAUtB,EAAAC,EAAAC,cAACsD,EAAD,CAAYlC,OAAQA,MCpBrCmC,IAASC,OAAO1D,EAAAC,EAAAC,cAACyD,EAAD,MAAShC,SAASC,eAAe","file":"static/js/main.7abb79a1.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\nconst RestaurantRow = (props) => {\r\n\r\n  let restaurantData = JSON.parse(localStorage.getItem(props.restaurant.name))\r\n\r\n  const [checked, setChecked] = useState(restaurantData.checked)\r\n\r\n  const onCheckChange = () => {\r\n    if (checked) {\r\n      restaurantData.checked = !checked\r\n      localStorage.setItem(restaurantData.name, JSON.stringify(restaurantData))\r\n      setChecked(!checked)\r\n    } else {\r\n      restaurantData.checked = !checked\r\n      localStorage.setItem(restaurantData.name, JSON.stringify(restaurantData))\r\n      setChecked(!checked)\r\n    }\r\n  }\r\n  \r\n  // Get details of active restaurant\r\n  //const displayDetails = () => {\r\n    //if (!restaurantData.address) {\r\n      //let request = {\r\n        //placeId: restaurantData.id,\r\n        //fields: ['formatted_address', 'formatted_phone_number']\r\n      //}\r\n      //props.service.getDetails(request, (place) => {\r\n        //restaurantData.address = place.formatted_address\r\n        //restaurantData.phone = place.formatted_phone_number\r\n        //localStorage.setItem(restaurantData.name, JSON.stringify(restaurantData))\r\n      //})\r\n    //}\r\n  //}\r\n\r\n  return (\r\n    <label>\r\n      <div id=\"restaurantRow\" style={{'backgroundColor': checked ? \"#aaa\": \"white\"}}>\r\n        <input type=\"radio\" id={restaurantData.id} name=\"rowRadio\" style={{display: \"none\"}}/>\r\n        <input type=\"checkbox\" id=\"rowCheckbox\" onChange={onCheckChange} checked={checked}/>\r\n        \r\n        <h3 id=\"rowHeader\" style={{'color': checked ? '#666':'black'}}>\r\n          {props.restaurant.name}\r\n        </h3>\r\n        \r\n        {checked && <h3 className=\"been-here\">BEEN HERE</h3>}\r\n      </div>\r\n    </label>\r\n  )\r\n}\r\n\r\nexport default RestaurantRow","import React, { useState, useEffect } from 'react'\r\nimport RestaurantRow from './RestaurantRow'\r\n\r\nconst GetResults = (props) => {\r\n  const [rows, setRows] = useState()\r\n\r\n  let mylocation = new window.google.maps.LatLng(props.latLng[0], props.latLng[1])\r\n  const radius = 2000\r\n\r\n  let requestObj = {\r\n    location: mylocation,\r\n    radius: radius,\r\n    type: [ 'restaurant' ],\r\n  }\r\n\r\n  const service = new window.google.maps.places.PlacesService(document.getElementById('google-data'))\r\n\r\n    let rowContainer = []\r\n    \r\n    useEffect(() => {\r\n      service.nearbySearch(requestObj, (results, status, pagination) => {\r\n        if (status !== 'OK') return\r\n\r\n        results.forEach((data) => {\r\n\r\n          const restaurant = {\r\n            key: data.id,\r\n            name: data.name,\r\n            id: data.place_id,\r\n            checked: false\r\n          }\r\n\r\n          if (!localStorage.getItem(restaurant.name)){\r\n            localStorage.setItem(restaurant.name, JSON.stringify(restaurant))\r\n          }\r\n\r\n          let createRow = <RestaurantRow key={restaurant.id} service={service} restaurant={restaurant}/>\r\n          rowContainer.push(createRow)\r\n        })\r\n        setRows(rowContainer)\r\n      })\r\n    }, [props.latLng])\r\n\r\n  return (\r\n    <div>\r\n      {rows}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default GetResults","import React, { useState } from 'react'\r\nimport './App.css'\r\nimport GetResults from './components/GetResults'\r\n\r\nconst App = () => {\r\n\r\nconst [latLng, setLatLng] = useState([41.7962928, -88.19741479999999])\r\n\r\nconst input = document.getElementById('autocomplete')\r\nconst autocomplete = new window.google.maps.places.Autocomplete(input, \r\n  {types: ['(regions)'], componentRestrictions: {country: 'US'}})\r\n\r\nautocomplete.addListener('place_changed', () => {\r\n  let place = autocomplete.getPlace()\r\n\r\n  if (!place.geometry) {\r\n    // Not needed atm\r\n    return\r\n  }\r\n  let latLng = [place.geometry.location.lat(), place.geometry.location.lng()]\r\n  setLatLng(latLng)\r\n})\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {latLng && <GetResults latLng={latLng}/>}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}